package org.jabref.gui.actions;

import java.util.List;
import java.util.Optional;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.jabref.Globals;
import org.jabref.gui.BasePanel;
import org.jabref.gui.JabRefFrame;
import org.jabref.gui.undo.NamedCompound;
import org.jabref.gui.undo.UndoableKeyChange;
import org.jabref.gui.util.component.CheckBoxMessage;
import org.jabref.gui.worker.AbstractWorker;
import org.jabref.logic.bibtexkeypattern.BibtexKeyGenerator;
import org.jabref.logic.l10n.Localization;
import org.jabref.model.FieldChange;
import org.jabref.model.entry.BibEntry;
import org.jabref.preferences.JabRefPreferences;

public class GenerateBibtexKeyAction extends AbstractWorker {
    private BasePanel basePanel;
    private JabRefFrame frame;
    private List<BibEntry> entries;
    private boolean canceled;

    public GenerateBibtexKeyAction(JabRefFrame frame, BasePanel basePanel) {
        this.basePanel = basePanel;
        this.frame = frame;
    }

    @Override
    public void init() {
        entries = basePanel.getSelectedEntries();

        if (entries.isEmpty()) {
            JOptionPane.showMessageDialog(frame,
                    Localization.lang("First select the entries you want keys to be generated for."),
                    Localization.lang("Autogenerate BibTeX keys"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        frame.block();
        basePanel.output(formatOutputMessage(Localization.lang("Generating BibTeX key for"), entries.size()));
    }

    @Override
    public void run() {
        // We don't want to generate keys for entries which already have one thus remove the entries
        if (Globals.prefs.getBoolean(JabRefPreferences.AVOID_OVERWRITING_KEY)) {
            entries.removeIf(BibEntry::hasCiteKey);
            // if we're going to override some cite keys warn the user about it
        } else if (Globals.prefs.getBoolean(JabRefPreferences.WARN_BEFORE_OVERWRITING_KEY)) {
            if (entries.parallelStream().anyMatch(BibEntry::hasCiteKey)) {
                CheckBoxMessage cbm = new CheckBoxMessage(
                        Localization.lang("One or more keys will be overwritten. Continue?"),
                        Localization.lang("Disable this confirmation dialog"), false);
                final int answer = JOptionPane.showConfirmDialog(frame, cbm,
                        Localization.lang("Overwrite keys"), JOptionPane.YES_NO_OPTION);
                Globals.prefs.putBoolean(JabRefPreferences.WARN_BEFORE_OVERWRITING_KEY, !cbm.isSelected());

                if (answer == JOptionPane.NO_OPTION) {
                    canceled = true;
                    return;
                }
            }
        }

        // generate the new cite keys for each entry
        final NamedCompound compound = new NamedCompound(Localization.lang("Autogenerate BibTeX keys"));
        BibtexKeyGenerator keyGenerator = new BibtexKeyGenerator(basePanel.getBibDatabaseContext(), Globals.prefs.getBibtexKeyPatternPreferences());
        for (BibEntry entry : entries) {
            keyGenerator
                    .generateAndSetKey(entry)
                    .ifPresent(fieldChange -> compound.addEdit(new UndoableKeyChange(fieldChange)));
        }
        compound.end();

        // register the undo event only if new cite keys were generated
        if (compound.hasEdits()) {
            basePanel.getUndoManager().addEdit(compound);
        }
    }

    @Override
    public void update() {
        if (canceled) {
            frame.unblock();
            return;
        }
        basePanel.markBaseChanged();

        // Prevent selection loss for autogenerated BibTeX-Keys
        for (final BibEntry bibEntry : entries) {
            SwingUtilities.invokeLater(() -> {
                final int row = basePanel.getMainTable().findEntry(bibEntry);
                if ((row >= 0) && (basePanel.getMainTable().getSelectedRowCount() < entries.size())) {
                    basePanel.getMainTable().addRowSelectionInterval(row, row);
                }
            });
        }
        basePanel.output(formatOutputMessage(Localization.lang("Generated BibTeX key for"), entries.size()));
        frame.unblock();
    }

    private String formatOutputMessage(String start, int count) {
        return String.format("%s %d %s.", start, count,
                (count > 1 ? Localization.lang("entries") : Localization.lang("entry")));
    }
}
